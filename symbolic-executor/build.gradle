plugins {
    id 'java'
    id 'groovy'
    id 'eclipse'
    id 'application'
    id 'com.diffplug.spotless' version '6.9.0'
}

version = projectVersion

def javaVer = JavaVersion.VERSION_17
println "Required JAVA version: ${javaVer}"

java {
    sourceCompatibility = javaVer
    targetCompatibility = javaVer
}
javadoc {
    configurations.implementation.setCanBeResolved(true)
    source = sourceSets.main.allJava
}
configurations {
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}
tasks.withType(JavaCompile) {
    options.incremental = true // one flag, and things will get MUCH faster
    options.compilerArgs += ['--add-opens=java.base/jdk.internal.access=ALL-UNNAMED','--add-exports=java.base/jdk.internal.access=ALL-UNNAMED']
    options.compilerArgs += ['--add-opens=java.base/jdk.internal.access=ALL-UNNAMED','--add-exports=java.base/jdk.internal.access=ALL-UNNAMED']
    options.compilerArgs += ['--add-opens=java.base/jdk.internal.misc=ALL-UNNAMED','--add-exports=java.base/jdk.internal.misc=ALL-UNNAMED']
    options.compilerArgs += ['--add-opens=java.base/jdk.unsupported=ALL-UNNAMED','--add-exports=java.base/jdk.unsupported=ALL-UNNAMED']
    options.compilerArgs += ['--add-opens=java.base/sun.security.util=ALL-UNNAMED','--add-exports=java.base/sun.security.util=ALL-UNNAMED']
    options.compilerArgs += ['--add-opens=java.base/jdk.internal.org.objectweb.asm.tree=ALL-UNNAMED','--add-exports=java.base/jdk.internal.org.objectweb.asm.tree=ALL-UNNAMED']
}

// repositories {
//    mavenCentral()
// }
repositories {
    // try to resolve by pom first
    mavenCentral()
}

javadoc {
    //source = sourceSets.main.allJava
    source = fileTree('src/main/java-delomboked')
    classpath = configurations.implementation
}

task delombok(type: JavaExec) {
    main = 'lombok.launch.Main'
    classpath = configurations.implementation //configurations.compileOnly + configurations.annotationProcessor
    args = ['delombok',
            'src/main/java',
            '-d', 'src/main/java-delomboked']
}
// In this section you declare the dependencies for your production and test code
dependencies {

    implementation libs.bundles.asm
    implementation libs.bundles.httpcomponents

    implementation libs.lombok
    annotationProcessor libs.lombok
    testCompileOnly libs.lombok
    testAnnotationProcessor libs.lombok
    testImplementation libs.spock.core


    implementation libs.jackson.databind
    implementation libs.gson
    // Internal Dependencies
    implementation libs.java.smt
    implementation rootProject.fileTree(dir: 'libs', include: ['*.jar']) // loads com.microsoft.z3


    testImplementation 'ch.qos.logback:logback-classic:1.1.2'
    testImplementation 'org.testcontainers:testcontainers:1.17.2'
    testRuntimeOnly 'org.springframework.boot:spring-boot-starter-web'
    testRuntimeOnly platform('org.springframework.boot:spring-boot-dependencies:2.7.6')
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testImplementation 'org.assertj:assertj-core:3.23.1'
    testImplementation "io.github.openfeign:feign-core:11.9"
    testImplementation 'com.fasterxml.jackson.core:jackson-core:2.13.3'
    testImplementation 'org.mockito:mockito-core:3.12.4'  // Adjust the version as needed
}


jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes (
                "Can-Redefine-Classes": true,
                "Can-Retransform-Classes": true,
                'Premain-Class': 'de.uzl.its.swat.instrument.Transformer')
    }

    from {
        exclude '**/module-info.class'
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task enforceJavaVersion {
    doLast {
        def activeJavaVersion = JavaVersion.current()
        if(activeJavaVersion != javaVer) {
            throw new IllegalStateException("Wrong active Java version; Found: "
                    + activeJavaVersion + " Required: " + javaVer)
        }
    }
}

task copyJar(type: Copy) {
    from jar
    into 'lib'
    rename (String fileName) -> {fileName = 'symbolic-executor.jar'}
}

test {
    useJUnitPlatform()
}
spotless {
    // optional: limit format enforcement to just the files changed by this feature branch
    //ratchetFrom 'origin/main'
    enforceCheck false

    format 'misc', {
        // define the files to apply `misc` to
        target '*.gradle', '*.md', '.gitignore','.conf'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
    java {
        importOrder()
        removeUnusedImports()
        googleJavaFormat().aosp().reflowLongStrings()
    }
}

// Set duplicate strategy to remove a warning
distTar.setDuplicatesStrategy(DuplicatesStrategy.INCLUDE)
distZip.setDuplicatesStrategy(DuplicatesStrategy.INCLUDE)

build.finalizedBy copyJar
compileJava.dependsOn(enforceJavaVersion)
